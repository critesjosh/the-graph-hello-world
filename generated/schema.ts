// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Name extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("updater", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Name entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Name entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Name", id.toString(), this);
    }
  }

  static load(id: string): Name | null {
    return changetype<Name | null>(store.get("Name", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newName(): string | null {
    let value = this.get("newName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newName(value: string | null) {
    if (!value) {
      this.unset("newName");
    } else {
      this.set("newName", Value.fromString(<string>value));
    }
  }

  get updater(): Bytes {
    let value = this.get("updater");
    return value!.toBytes();
  }

  set updater(value: Bytes) {
    this.set("updater", Value.fromBytes(value));
  }
}
